from typing import List

import pandas as pd
import pytest

from mcda.core.functions import Threshold
from mcda.electre.discordance import discordance

from .. import helpers


@pytest.fixture
def veto_thresholds(criterion_names: List[str]) -> pd.Series:
    """Returns all criteria veto thresholds."""
    return pd.Series(
        [
            Threshold(0.2, 35000),
            None,
            Threshold(0, 3),
            Threshold(0, 80),
            Threshold(0, 45),
            None,
            Threshold(0, 500),
            Threshold(0, 120),
        ],
        index=criterion_names,
    )


@pytest.fixture
def pre_veto_thresholds(criterion_names: List[str]) -> pd.Series:
    """Returns pre-veto thresholds."""
    return pd.Series(
        [
            Threshold(0.15, 25000),
            None,
            None,
            Threshold(0, 60),
            Threshold(0, 25),
            None,
            None,
            Threshold(0, 40),
        ],
        index=criterion_names,
    )


@pytest.mark.skip(reason="XD")
def test_discordance_no_pre_veto(
    performance_table: pd.DataFrame,
    scales: pd.Series,
    weights: pd.Series,
    preference_thresholds: pd.Series,
    veto_thresholds: pd.Series,
):
    expected_values = [
        [
            0.0,
            0.433734939759,
            0.241220883534,
            0.217124497992,
            0.348915662651,
            0.481927710843,
            0.149590361446,
            0.578313253012,
            0.240963855422,
            0.289156626506,
            0.481927710843,
            0.123309236948,
            0.578313253012,
        ],
        [
            0.0690763052209,
            0.0,
            0.116302934332,
            0.289156626506,
            0.144578313253,
            0.144578313253,
            0.0963855421687,
            0.289156626506,
            0.144578313253,
            0.144578313253,
            0.192771084337,
            0.0771445331281,
            0.289156626506,
        ],
        [
            0.0,
            0.281959839357,
            0.0,
            0.144578313253,
            0.144578313253,
            0.37172690763,
            0.0,
            0.289156626506,
            0.144578313253,
            0.289156626506,
            0.289156626506,
            0.0,
            0.310939759036,
        ],
        [
            0.0963855421687,
            0.347791164659,
            0.192771084337,
            0.0,
            0.0911164658634,
            0.347630522088,
            0.0963855421687,
            0.316530120482,
            0.289156626506,
            0.169638554217,
            0.251180722892,
            0.144578313253,
            0.335036144578,
        ],
        [
            0.0963855421687,
            0.181847389558,
            0.192771084337,
            0.0,
            0.0,
            0.178843373494,
            0.0963855421687,
            0.286506024096,
            0.240963855422,
            0.144578313253,
            0.192771084337,
            0.0501204819277,
            0.149076305221,
        ],
        [
            0.0809638554217,
            0.0963855421687,
            0.15686746988,
            0.0,
            0.0912449799197,
            0.0,
            0.11437751004,
            0.0963855421687,
            0.0963855421687,
            0.0,
            0.0481927710843,
            0.0963855421687,
            0.192189069311,
        ],
        [
            0.0173274327526,
            0.289156626506,
            0.199505426246,
            0.289156626506,
            0.39897188755,
            0.33734939759,
            0.0,
            0.480449799197,
            0.240963855422,
            0.144578313253,
            0.400642570281,
            0.206141127611,
            0.528514056225,
        ],
        [
            0.0631325301205,
            0.181654618474,
            0.0481927710843,
            0.0409638554217,
            0.0369477911647,
            0.0792931726907,
            0.0963855421687,
            0.0,
            0.0470682730924,
            0.0401606425703,
            0.029156626506,
            0.0481927710843,
            0.00160642570281,
        ],
        [
            0.153702811245,
            0.353172690763,
            0.289156626506,
            0.33734939759,
            0.33734939759,
            0.374457831325,
            0.399678714859,
            0.385542168675,
            0.0,
            0.212947791165,
            0.385542168675,
            0.180626506024,
            0.33734939759,
        ],
        [
            0.0963855421687,
            0.336305220884,
            0.326554216867,
            0.0614939759036,
            0.288514056225,
            0.240963855422,
            0.118875502008,
            0.329831325301,
            0.0963855421687,
            0.0,
            0.240963855422,
            0.112738955823,
            0.366853312313,
        ],
        [
            0.0481927710843,
            0.199453815261,
            0.144578313253,
            0.0481927710843,
            0.121445783132,
            0.0482570281124,
            0.05140562249,
            0.0963855421687,
            0.144578313253,
            0.0481927710843,
            0.0,
            0.144578313253,
            0.106024096386,
        ],
        [
            0.0907630522088,
            0.433734939759,
            0.187951807229,
            0.144578313253,
            0.232481927711,
            0.481927710843,
            0.125301204819,
            0.382875502008,
            0.22875502008,
            0.289156626506,
            0.441381526104,
            0.0,
            0.428851405623,
        ],
        [
            0.0963855421687,
            0.211983935743,
            0.192771084337,
            0.0,
            0.0436144578313,
            0.0803212851406,
            0.0963855421687,
            0.0771084337349,
            0.120963855422,
            0.0,
            0.0481927710843,
            0.0763052208835,
            0.0,
        ],
    ]

    result = discordance(
        performance_table, scales, weights, preference_thresholds, veto_thresholds
    )
    assert result.index.equals(performance_table.index)
    assert result.columns.equals(performance_table.index)
    helpers.assert_array_values(expected_values, result.to_numpy())
